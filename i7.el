;;; i7.el --- Inform 7 major mode

;; Copyright (C) 2013, 2014  Brady J. Garvin

;; Author: Brady Garvin <bgarvin@acm.org>
;; Version: 0.1
;; Keywords: languages

;; Inform 7 Mode is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or (at
;; your option) any later version.

;; Inform 7 Mode is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with Inform 7 Mode; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.

;;; Commentary:


;;; Code:

;;; Customization:

(defgroup i7 nil
  "Inform 7 major mode."
  :group 'languages)

(defcustom i7-mode-hook nil
  "Mode hook for Inform 7 major mode."
  :group 'i7
  :type 'hook)

;; Based on http://bzr.savannah.gnu.org/lh/emacs/emacs-24/annotate/head:/lisp/faces.el#L2167.
(defface i7-dabbrev-face
  '((((class color grayscale) (min-colors 88) (background light))
     :foreground "grey50")
    (((class color grayscale) (min-colors 88) (background dark))
     :foreground "grey70")
    (((class color) (min-colors 8) (background light))
     :foreground "green")
    (((class color) (min-colors 8) (background dark))
     :foreground "yellow"))
  "The face for suggested Inform 7 completions."
  :group 'i7
  :type 'face)

;;; Constant definitions autogenerated from protocol.hpp:

(defconst i7-protocol-version-number '(?\x00 ?\x00 ?\x00 ?\x00))

;; Messages sent by the client (the editor)

;; Sent to request the server to terminate.
(defconst i7-client-end-session '(?\x00 ?\x00 ?\x00 ?\x00))
;; Sent to signal the end of support messages and the beginning of highlighting.
(defconst i7-client-begin-session '(?\x00 ?\x00 ?\x00 ?\x01))

;; Sent before CLIENT-BEGIN-SESSION to indicate client support for a highlight
;; code.  The server will only send highlights that both it and the client
;; support.
;; See below for the possibled highlight codes.
(defconst i7-client-support-highlight-code '(?\x00 ?\x00 ?\x01 ?\x01)) ;; [highlight code]

;; Sent when a file is no longer relevant to the highlighting process.
(defconst i7-client-discard-file '(?\x00 ?\x01 ?\x00 ?\x00)) ;; [file number]
;; Sent when a file is determined relevant to the highlighting process.
;; Usually sent for any files being edited as well as included extensions.
;; See below for the possibled file flags, which should be ored together.
(defconst i7-client-introduce-file '(?\x00 ?\x01 ?\x00 ?\x01)) ;; [file number] [file flags] [FILE NAME WITHOUT FILE EXTENSION]

;; Sent to signal an edit that has removed codepoints from a file.
(defconst i7-client-remove-codepoints '(?\x00 ?\x01 ?\x01 ?\x00)) ;; [file number] [inclusive lower bound] [exclusive upper bound]
;; Sent to signal an edit that has added codepoints to a file.
(defconst i7-client-add-codepoints '(?\x00 ?\x01 ?\x01 ?\x01)) ;; [file number] [beginning codepoint index] [INSERTION]

;; Sent when a view no longer exists.
(defconst i7-client-discard-view '(?\x00 ?\x02 ?\x00 ?\x00)) ;; [view number]
;; Sent when a view of the given file is created.  It begins empty.
(defconst i7-client-introduce-view '(?\x00 ?\x02 ?\x00 ?\x01)) ;; [view number] [file number]
;; Sent when a view becomes (effectively) empty but is not destroyed.
;; Useful, for instance, to prevent updates in occluded windows.
(defconst i7-client-clear-view '(?\x00 ?\x02 ?\x00 ?\x02)) ;; [view number]
;; Sent when the range of codepoints visible in a view changes.
(defconst i7-client-move-view '(?\x00 ?\x02 ?\x00 ?\x03)) ;; [view number] [inclusive lower bound] [exclusive upper bound]

;; Sent when a view no longer has a cursor position on which to base emphasis,
;; usually when it loses focus.
(defconst i7-client-clear-cursor '(?\x00 ?\x02 ?\x01 ?\x00)) ;; [view number]
;; Sent when the view has focus and a cursor position on which to base emphasis,
;; usually when it gains focus.  The endpoints should be the same codepoint
;; index to indicate the location of the cursor when no text is selected,
;; different indicies to give the endpoints of the selection if there is one.
;; (Note that multiple views may have a cursor set in them at the same time, and
;; emphasis is likewise per-view.)
(defconst i7-client-set-cursor '(?\x00 ?\x02 ?\x01 ?\x01)) ;; [view number] [inclusive lower bound] [exclusive upper bound]

;; File flags used in the messages sent by the client (the editor)

;; Sent when the file should be highlighted as an extension rather than a story.
(defconst i7-client-file-is-extension-flag '(?\x00 ?\x00 ?\x00 ?\x01))
;; Sent when an extension is in a correct directory to be referenced by
;; inclusions and not also superseded by another copy.
(defconst i7-client-file-is-includable-flag '(?\x00 ?\x00 ?\x00 ?\x02))

;; Messages sent by the server (the highlighter)

;; Sent to instruct the client to remove all highlighting in the given range.
(defconst i7-server-remove-highlights '(?\x00 ?\x01 ?\x00 ?\x00)) ;; [file number] [inclusive lower bound] [exclusive upper bound]
;; Sent to instruct the client to highlight the given range per the given code.
;; See below for the possibled highlight codes.
(defconst i7-server-add-highlight '(?\x00 ?\x01 ?\x00 ?\x01)) ;; [file number] [inclusive lower bound] [exclusive upper bound] [highlight code]
(defconst i7-server-remove-warning '(?\x00 ?\x01 ?\x00 ?\x02)) ;; [file number] [inclusive lower bound] [exclusive upper bound]
;; Sent to instruct the client to add warning formatting to the given range.
;; Warning formatting is usually effected by underlining the text orange in
;; addition to any formatting prescribed by its highlights.
(defconst i7-server-add-warning '(?\x00 ?\x01 ?\x00 ?\x03)) ;; [file number] [inclusive lower bound] [exclusive upper bound]
;; Sent to instruct the client to remove all errors in the given range.
(defconst i7-server-remove-error '(?\x00 ?\x01 ?\x00 ?\x04)) ;; [file number] [inclusive lower bound] [exclusive upper bound]
;; Sent to instruct the client to add error formatting to the given range.
;; Error formatting is usually effected by underlining the text red in addition
;; to any formatting prescribed by its highlights.  If an error and warning
;; overlap and conflict in formatting, the error should trump the warning.
(defconst i7-server-add-error '(?\x00 ?\x01 ?\x00 ?\x05)) ;; [file number] [inclusive lower bound] [exclusive upper bound]
;; Sent to instruct the client to remove all hovertexts in the given range.
(defconst i7-server-remove-hovertext '(?\x00 ?\x01 ?\x01 ?\x00)) ;; [file number] [inclusive lower bound] [exclusive upper bound]
;; Sent to instruct the client to add hovertext to the given range.  Hovertext
;; is displayed in a popup or "tooltip" when the mouse hovers over the relevant
;; range; there should also be a keyboard command to make it visible.
(defconst i7-server-add-hovertext '(?\x00 ?\x01 ?\x01 ?\x01)) ;; [file number] [inclusive lower bound] [exclusive upper bound] [HOVERTEXT]

;; Sent to instruct the client to remove all emphasis in the given range.
(defconst i7-server-remove-emphasis '(?\x00 ?\x02 ?\x00 ?\x00)) ;; [view number] [inclusive lower bound] [exclusive upper bound]
;; Sent to instruct the client to emphasize the given range.  Emphasis is
;; usually effected by bolding the text in addition to any formatting prescribed
;; by its highlights.
(defconst i7-server-add-emphasis '(?\x00 ?\x02 ?\x00 ?\x01)) ;; [view number] [inclusive lower bound] [exclusive upper bound]
;; Sent when suggestions sent earlier no longer apply.
(defconst i7-server-clear-suggestions '(?\x00 ?\x02 ?\x01 ?\x00))
;; Sent to suggest text to insert after the cursor.  Will be sent multiple times
;; if there are multiple suggestions.
(defconst i7-server-make-suggestion '(?\x00 ?\x02 ?\x01 ?\x01)) ;; [SUGGESTION]

;; Highlight codes (partly based on the Inform Technical Manual)

(defconst i7-highlight-ordinary-i7 '(?\x00000000))
(defconst i7-highlight-i7-delimiter '(?\x00000001)) ;; (+ and +)

(defconst i7-highlight-ordinary-i6 '(?\x00010000))
(defconst i7-highlight-i6-delimiter '(?\x00010001)) ;; (- and -)
(defconst i7-highlight-i6-directive '(?\x00010002))
(defconst i7-highlight-i6-keyword '(?\x00010004))
(defconst i7-highlight-i6-function '(?\x00010100))
(defconst i7-highlight-i6-function-delimiter '(?\x00010101)) ;; [ and ]
(defconst i7-highlight-i6-property-like '(?\x00010102))
(defconst i7-highlight-i6-property-like-delimiter '(?\x00010103))

(defconst i7-highlight-vm-assembly '(?\x00020000))
(defconst i7-highlight-vm-assembly-delimiter '(?\x00020001)) ;; @

(defconst i7-highlight-comment '(?\x00030000))
(defconst i7-highlight-comment-delimiter '(?\x00030001)) ;; !, [, and ]
(defconst i7-highlight-documentation '(?\x00030100))
(defconst i7-highlight-documentation-delimiter '(?\x00030101)) ;; ---- DOCUMENTATION ----
(defconst i7-highlight-paste-marker '(?\x00030103)) ;; *:

(defconst i7-highlight-character-literal '(?\x00040000))
(defconst i7-highlight-character-literal-delimiter '(?\x00040001)) ;; '
(defconst i7-highlight-string-literal '(?\x00040100))
(defconst i7-highlight-string-literal-delimiter '(?\x00040101)) ;; "
(defconst i7-highlight-character-escape '(?\x00040200))
(defconst i7-highlight-character-escape-delimiter '(?\x00040201)) ;; @ and @@
(defconst i7-highlight-substitution '(?\x00040300))
(defconst i7-highlight-substitution-delimiter '(?\x00040301)) ;; [ and ]
(defconst i7-highlight-segmented-substitution '(?\x00040302))
(defconst i7-highlight-segmented-substitution-delimiter '(?\x00040303)) ;; [ and ]


;;; Functions for decoding server-to-client messages:

(defun i7-highlight-face (highlight-code)
  "Return the face corresponding to the I7 highlight code HIGHLIGHT-CODE."
  (cond
   ((= highlight-code i7-highlight-ordinary-i7) nil)
   ((= highlight-code i7-highlight-i7-delimiter) font-lock-keyword-face)
   ((= highlight-code i7-highlight-ordinary-i6) nil)
   ((= highlight-code i7-highlight-i6-delimiter) font-lock-keyword-face)
   ((= highlight-code i7-highlight-i6-directive) font-lock-preprocessor-face)
   ((= highlight-code i7-highlight-i6-keyword) font-lock-keyword-face)
   ((= highlight-code i7-highlight-i6-function) font-lock-function-name-face)
   ((= highlight-code i7-highlight-i6-function-delimiter) font-lock-function-name-face)
   ((= highlight-code i7-highlight-i6-property-like) font-lock-variable-name-face)
   ((= highlight-code i7-highlight-i6-property-like-delimiter) font-lock-variable-name-face)
   ((= highlight-code i7-highlight-vm-assembly) font-lock-builtin-face)
   ((= highlight-code i7-highlight-vm-assembly-delimiter) font-lock-builtin-face)
   ((= highlight-code i7-highlight-comment) font-lock-comment-face)
   ((= highlight-code i7-highlight-comment-delimiter) font-lock-comment-delimiter-face)
   ((= highlight-code i7-highlight-documentation) font-lock-doc-face)
   ((= highlight-code i7-highlight-documentation-delimiter) font-lock-doc-face)
   ((= highlight-code i7-highlight-paste-marker) font-lock-keyword-face)
   ((= highlight-code i7-highlight-character-literal) font-lock-constant-face)
   ((= highlight-code i7-highlight-character-literal-delimiter) font-lock-constant-face)
   ((= highlight-code i7-highlight-string-literal) font-lock-string-face)
   ((= highlight-code i7-highlight-string-literal-delimiter) font-lock-string-face)
   ((= highlight-code i7-highlight-character-escape) font-lock-constant-face)
   ((= highlight-code i7-highlight-character-escape-delimiter) font-lock-constant-face)
   ((= highlight-code i7-highlight-substitution) font-lock-function-name-face)
   ((= highlight-code i7-highlight-substitution-delimiter) font-lock-function-name-face)
   ((= highlight-code i7-highlight-segmented-substitution) font-lock-function-name-face)
   ((= highlight-code i7-highlight-segmented-substitution-delimiter) font-lock-function-name-face)))

;;; Functions for encoding client-to-server messages:

(defun i7-flatten-map (function list)
  "Apply FUNCTION to each element of LIST and append the results."
  (apply 'append (mapcar function list)))

(defun i7-encode-codepoint (codepoint)
  "Return the UTF-32 of CODEPOINT as a list of bytes."
  (list ?\x0 (lsh (logand ?\x1F0000 codepoint) -16) (lsh (logand ?\xFF00 codepoint) -8) (logand ?\xFF codepoint)))

(defun i7-encode-string (string)
  "Return the UTF-32 of the codepoints of STRING as a list of bytes."
  (i7-highlighter-flatten-map 'i7-highlighter-encode-character (append string '(?\x0))))

(defun i7-highlighter-encode (value)
  "Return the UTF-32 of VALUE as a list of bytes unless it is already a list."
  (cond
   ((integer-or-marker-p value)
    (i7-highlighter-encode-character value))
   ((stringp value)
    (i7-highlighter-encode-string value))
   ((listp value)
    value)))

;;; Variables and functions for receiving server-to-client messages:

(defvar i7-highlighter-reply-buffer nil
  "The list of unprocessed bytes recieved from the I7 highlighter.")

(defun i7-highlighter-process-filter (process output)
  "Accumulate (from PROCESS) OUTPUT in `i7-highlighter-reply-buffer'."
  (setq i7-highlighter-reply-buffer (append i7-highlighter-reply-buffer output nil))
  (i7-highlighter-handler))

(defun i7-highlighter-reply-matches-p (index value)
  "Return t if byte INDEX in `i7-highlighter-reply-buffer' is VALUE."
  (= (elt i7-highlighter-reply-buffer index) value))

(defun i7-pop-reply-quadruple ()
  "Pop four bytes off of `i7-highlighter-reply-buffer' as one integer."
  (let ((first-byte (pop i7-highlighter-reply-buffer))
	(second-byte (pop i7-highlighter-reply-buffer))
	(third-byte (pop i7-highlighter-reply-buffer))
	(fourth-byte (pop i7-highlighter-reply-buffer)))
    (+ (lsh first-byte 24) (lsh second-byte 16) (lsh third-byte 8) fourth-byte)))

;;; Functions for sending client-to-server messages:

(defun i7-send-command (&rest arguments)
  "If the highlighter is running, send ARGUMENTS to it as UTF-32."
  (if (and
       (boundp 'i7-highlighter-process)
       (eq (process-status i7-highlighter-process) 'run))
      (process-send-string i7-highlighter-process (apply 'unibyte-string (i7-flatten-map 'i7-encode arguments)))))

;;; The mode essentials:

;; The file extensions.
(add-to-list 'auto-mode-alist '("\\.ni\\'\\|\\.i7x\\'" . i7-mode))

;; The syntax table (not used for highlighting, but used for M-b, M-f, etc.).
(defvar i7-mode-syntax-table
  (make-syntax-table)
  "Syntax table for Inform 7 major mode.")

;; The indentation.
(defun i7-indent-line ()
  "Indent the current line as Inform 7 code."
  (interactive)
  (save-excursion))

;; The keymap.
(defvar i7-mode-map
  (let ((keymap (make-sparse-keymap)))
    ;; Entries like
    ;; (define-key keymap [?\C-c ?\C-j] 'newline-and-indent)
    ;; go here.
    keymap)
  "Keymap for Inform 7 major mode.")

;; Support for old Emacsen.
(unless (fboundp 'setq-local)
  (defmacro setq-local (variable value)
    `(set (make-local-variable ',variable) ,value)))

;;;###autoload
;; The mode entry point
(defun i7-mode ()
  "Major mode for editing Inform 7 source code."
  (interactive)
  (kill-all-local-variables)
  (set-syntax-table i7-mode-syntax-table)
  (setq-local indent-line-function 'i7-indent-line)
  (use-local-map i7-mode-map)
  ;; (setq-local font-lock-function 'i7-font-lock-function)
  (setq major-mode 'i7-mode)
  (setq mode-name "I7")
  (run-mode-hooks 'i7-mode-hook))

(provide 'i7-mode)

;;; i7.el ends here
